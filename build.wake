def installDir = simplify "build/{here}"
global def freedomDevicetreeToolsInstallDir = "build/{here}"

global def freedomDevicetreeToolsPath = "{installDir}/bin"

global target freedomDevicetreeToolsInstall Unit =
  def wrapperScript = source "{here}/scripts/autoconf_wrapper".simplify
  def runDir = here
  def cmdline =
    relative runDir wrapperScript.getPathName,
    "--configure-args=",
    "--install-dir={relative runDir installDir}",
    Nil
  def inputs = mkdir installDir, sources here `.*\.(c|c\+\+|cpp|h|h\+\+|hpp)`
  def foutputs _ = files installDir `.*`

  makePlan cmdline inputs
  | setPlanLocalOnly True
  | setPlanFnOutputs foutputs
  | setPlanDirectory runDir
  | runJob
  | getJobOutputs

def makeTool tool =
  freedomDevicetreeToolsInstall Unit
  | filter ("{installDir}/bin/{tool}" ==~ _.getPathName)
  | head
  | getOrElse "could not build {tool}!".makeError.makeBadPath

global def freedom_metal_header_generator   _ = makeTool "freedom-metal_header-generator"
global def freedom_bare_header_generator    _ = makeTool "freedom-bare_header-generator"

### Metal header Generator ###
tuple FreedomMetalHeaderGeneratorOptions =
  global DTBFile:    Path
  global OutputFile: String

tuple FreedomMetalHeaderGeneratorOutputs =
  global Header:       Path
  global InlineHeader: Path

global def makeFreedomMetalHeaderGeneratorOptions dtbFile outputFile =
  FreedomMetalHeaderGeneratorOptions dtbFile outputFile

global def runFreedomMetalHeaderGenerator options =
  def tool = freedom_metal_header_generator Unit
  def dtbFile = options.getFreedomMetalHeaderGeneratorOptionsDTBFile
  def outputFile = options.getFreedomMetalHeaderGeneratorOptionsOutputFile
  def cmdline =
    tool.getPathName,
    "-d", dtbFile.getPathName,
    "-o", outputFile,
    Nil
  def inputs = mkdir "{outputFile}/..".simplify, tool, dtbFile, Nil
  def outputs = makePlan cmdline inputs | runJob | getJobOutputs

  def result = findFailFn getPathResult outputs
  def get file = match result
    Fail e = makeBadPath e
    Pass paths =
      paths
      | filter (file ==* _.getPathName)
      | head
      | getOrElse "{tool.getPathName}: failed to produce {file}".makeError.makeBadPath

  def inlineHeaderFile = replace `\.h$` "-inline.h" outputFile

  FreedomMetalHeaderGeneratorOutputs
  "{outputFile}".get
  inlineHeaderFile.get


tuple FreedomBareHeaderGeneratorOptions =
  global DTBFile:    Path
  global OutputFile: String

global def makeFreedomBareHeaderGeneratorOptions dtbFile outputFile =
  FreedomBareHeaderGeneratorOptions dtbFile outputFile

global def runFreedomBareHeaderGenerator options =
  def tool = freedom_bare_header_generator Unit
  def dtbFile = options.getFreedomBareHeaderGeneratorOptionsDTBFile
  def outputFile = options.getFreedomBareHeaderGeneratorOptionsOutputFile
  def cmdline =
    tool.getPathName,
    "-d", dtbFile.getPathName,
    "-o", outputFile,
    Nil
  def inputs = mkdir "{outputFile}/..".simplify, tool, dtbFile, Nil
  makePlan cmdline inputs | runJob | getJobOutput
